library(plyr)
arrange(join(gdp,edu),CountryCode)
GdpEdu<-arrange(join(gdp,edu),CountryCode)
GdpEdu[13,]
GdpEdu<-arrange(GdpEdu,Ranking,desc(disp))
GdpEdu<-arrange(GdpEdu,Ranking,desc(Ranking))
GdpEdu[13,]
View(edu)
mean(GdpEdu[GdpEdu$Income.Group=="High income: OECD","Ranking"])
mean(GdpEdu[GdpEdu$Income.Group=="High income: nonOECD","Ranking"])
mean(GdpEdu[GdpEdu$Income.Group=="High income: OECD","Ranking"],na.rm=TRUE)
mean(GdpEdu[GdpEdu$Income.Group=="High income: nonOECD","Ranking"],na.rm=TRUE)
install.packages"Hmisc"
install.packages("Hmisc")
library(Hmisc)
GdpEdu$RankingGroups<-cut2(GdpEdu$Ranking,g=5)
table(GdpEdu$RankingGroups,GdpEdu$Income.Group)
View(GdpEdu)
GdpEdu<-arrange(GdpEdu,desc(Ranking))
GdpEdu[13,]
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "./data/housingIdaho.csv")
list.files ()
dateDownloaded<-date()
housingIdaho<-read.csv("./data/housingIdaho.csv")
housingIdaho$agricultureLogical<-housingIdaho$ACR==3&housingIdaho$AGS==6
head(housingIdaho[which(housingIdaho$agricultureLogical==TRUE),],n=3)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl,destfile = "./data/jeff.jpg",mode="wb")#binary file!
list.files ()
dateDownloaded<-date()
library(jpeg)
jeff<-readJPEG("./data/jeff.jpg", native=TRUE)
##TBD question What are the 30th and 80th quantiles of the resulting data?
quantile(jeff, probs=c(30,80)/100, na.rm=TRUE)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile = "./data/GDP.csv")
list.files ()
dateDownloaded<-date()
gdp<-read.csv("./data/GDP.csv",col.names=c("CountryCode","Ranking","Var1",
"LongName","GDP USD mln", "var2","var3","var4","var5","var6"), skip=4,
nrows=190)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl,destfile = "./data/education.csv")
list.files ()
dateDownloaded<-date()
edu<-read.csv("./data/education.csv")
#Match the data based on the country shortcode. How many of the IDs match?
length(pmatch(gdp$CountryCode,edu$CountryCode))
#Sort the data frame in descending order by GDP rank.
library(plyr)
GdpEdu<-arrange(join(gdp,edu),CountryCode)
GdpEdu<-arrange(GdpEdu,desc(Ranking))
#What is the 13th country in the resulting data frame?
GdpEdu[13,]
mean(GdpEdu[GdpEdu$Income.Group=="High income: OECD","Ranking"],na.rm=TRUE)
mean(GdpEdu[GdpEdu$Income.Group=="High income: nonOECD","Ranking"],na.rm=TRUE)
library(Hmisc)
GdpEdu$RankingGroups<-cut2(GdpEdu$Ranking,g=5)
table(GdpEdu$RankingGroups,GdpEdu$Income.Group)
levels(edu$CountryCode)
edu$CountryCode==gdp$CountryCode
pmatch(edu$CountryCode,gdp$CountryCode)
sum(is.na(pmatch(edu$CountryCode,gdp$CountryCode)))
234-45
length(edu$CountryCode)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "./data/housingIdaho.csv")
list.files ()
dateDownloaded<-date()
housingIdaho<-read.csv("./data/housingIdaho.csv")
##TBD question Create a logical vector that identifies the households
#on greater than 10 acres who sold more than $10,000 worth of agriculture
#products. Assign that logical vector to the variable agricultureLogical.
#Apply the which() function like this to identify the rows of the data frame
#where the logical vector is TRUE. which(agricultureLogical) What are the
#first 3 values that result?
housingIdaho$agricultureLogical<-housingIdaho$ACR==3&housingIdaho$AGS==6
head(housingIdaho[which(housingIdaho$agricultureLogical==TRUE),],n=3)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl,destfile = "./data/jeff.jpg",mode="wb")#binary file!
list.files ()
dateDownloaded<-date()
library(jpeg)
jeff<-readJPEG("./data/jeff.jpg", native=TRUE)
##TBD question What are the 30th and 80th quantiles of the resulting data?
quantile(jeff, probs=c(30,80)/100, na.rm=TRUE)
#Question 3
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile = "./data/GDP.csv")
list.files ()
dateDownloaded<-date()
gdp<-read.csv("./data/GDP.csv",col.names=c("CountryCode","Ranking","Var1",
"LongName","GDP USD mln", "var2","var3","var4","var5","var6"), skip=4,
nrows=190)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl,destfile = "./data/education.csv")
list.files ()
dateDownloaded<-date()
edu<-read.csv("./data/education.csv")
#Match the data based on the country shortcode. How many of the IDs match?
length(edu$CountryCode)-sum(is.na(pmatch(edu$CountryCode,gdp$CountryCode)))
#Sort the data frame in descending order by GDP rank.
library(plyr)
GdpEdu<-arrange(join(gdp,edu),CountryCode)
GdpEdu<-arrange(GdpEdu,desc(Ranking))
#What is the 13th country in the resulting data frame?
GdpEdu[13,]
mean(GdpEdu[GdpEdu$Income.Group=="High income: OECD","Ranking"],na.rm=TRUE)
mean(GdpEdu[GdpEdu$Income.Group=="High income: nonOECD","Ranking"],na.rm=TRUE)
GdpEdu$RankingGroups<-cut2(GdpEdu$Ranking,g=5)
table(GdpEdu$RankingGroups,GdpEdu$Income.Group)
setwd("C:/Users/Tuomas/Documents/Olga/Git/GettingAndCleaningData_Project")
#Get data and load into R
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile = "./data/activityGalaxy.zip")
dateDownloaded<-date()
library(utils)
unzip("./data/activityGalaxy.zip")
list.files ()
list.files("./data/UCI HAR Dataset")
list.files(path="./data/UCI HAR Dataset")
unzip("./data/activityGalaxy.zip",exdir="./data")
list.files ()
list.files(path="./data/UCI HAR Dataset")
list.files(path="./data/UCI HAR Dataset/test")
list.files(path="./data/UCI HAR Dataset/train")
test<-read.table(./data/UCI HAR Dataset/test/X_train.txt)
testLabel<-read.table(./data/UCI HAR Dataset/test/y_train.txt)
train<-read.table(./data/UCI HAR Dataset/train/X_train.txt)
trainLabel<-read.table(./data/UCI HAR Dataset/train/y_train.txt)
test<-read.table("./data/UCI HAR Dataset/test/X_train.txt")
testLabel<-read.table("./data/UCI HAR Dataset/test/y_train.txt")
train<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
trainLabel<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
list.files(path="./data/UCI HAR Dataset/test")
test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
testLabel<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
View(train)
View(trainLabel)
var<-read.fwf("./data/UCI HAR Dataset/features.txt",c(2,17))
View(var)
var<-read.fwf("./data/UCI HAR Dataset/features.txt",c(3,17))
View(var)
var<-cbind(1:561,read.table("./data/UCI HAR Dataset/features.txt"))
View(var)
var<-read.table("./data/UCI HAR Dataset/features.txt")
View(var)
actLbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
View(actLbl)
var<-read.table("./data/UCI HAR Dataset/features.txt")
actLbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
testLabel<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
testSub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
train<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
trainLabel<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
trainSub<-read.table("./data/UCI HAR Dataset/test/subject_train.txt")
View(testSub)
trainSub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
View(trainSub)
var<-read.table("./data/UCI HAR Dataset/features.txt")
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-rbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbll<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-rbind(train.sub,train.lbl,train.msmt)
var<-read.table("./data/UCI HAR Dataset/features.txt")
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbll<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
View(train)
View(train)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var)
View(tidy.data)
View(var)
names(tidy.data)<-c("Subject","Activity",var[,v2])
names(tidy.data)<-c("Subject","Activity",var$v2)
View(tidy.data)
class(var$v2)
class(var$V2)
names(tidy.data)<-c("Subject","Activity",var$V2)
View(tidy.data)
View(tidy.data)
var$V2
var1<-c("Subject","Activity",var$V2)
var1<-var$V2
var2<-c("Subject","Activity",var1)
var2<-list("Subject","Activity",var1)
var2<-c(as.factor("Subject"),as.factor("Activity"),var1)
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
names(tidy.data)<-c("Subject","Activity",var$V2)
View(tidy.data)
test<-table(1:5,c("a","b","c","d","e"))
test1<-table(sample(1:5))
test
test1
test<-cbind(1:5,c("a","b","c","d","e"))
test
test1<-sample(1:5,5)
test1
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var)
test2<-sapply(test1,test[match(test1,test[,1]),test[,2]])
test2<-sapply(test1,function(replace),replace[match(test1,test[,1]),test[,2]])
test2<-sapply(test1,function(replace) replace[match(test1,test[,1]),test[,2]])
test
test<-cbind(1:5,c("a","b","c","d","e"))
test2<-sapply(test1,function(replace) replace[match(test1,test[,1]),test[,2]])
test2<-sapply(test1,function(replace) replace[match(test1,test),test[,2]])
match(test1,test)
test1
test2<-test[test1,test[,2]]
class(test)
test[,2]
test[test1,2]
test2<-[test1,2]
test2<-test[test1,2]
test3<-tidy.data$Activity
test4<-cbind(test3, test.lbl[test3,"V2"])
test4<-cbind(test3, act.lbl[test3,"V2"])
View(test4)
test1<-sample(1:5,10)
test1<-sample(1:5,10,replace=TRUE)
test2<-test[test1,2]
test2
test4<-act.lbl[tidy.data$Activity,"V2"]
test4
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
View(tidy.data)
View(tidy.data)
head(tidy.data)
tidy.data[1:50,"Activity")
tidy.data[1:50,"Activity"]
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.lbl[1:50]
View(test.lbl)
View(test.lbl)
test.lbl[1:50,]
var
test.lbl[1:50,]
act.lbl
tidy.data[1:50,"Activity"]
# 1.Merge the training and the test sets to create one data set.
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var$V2)
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
tidy.data[1:50,"Activity"]
#clean memory
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var,act.lbl)
test<-tidy.data[,pmatch(c("mean","std"),names(tidy.data)]
test<-tidy.data[,pmatch(c("mean","std"),names(tidy.data))]
test<-pmatch(c("mean","std"),names(tidy.data))
test
test<-grep(c("mean","std"),names(tidy.data),ignore.case=TRUE)
test<-grep("mean",names(tidy.data),ignore.case=TRUE)
test
length(test)
test1<-grep("std",names(tidy.data),ignore.case=TRUE)
length(test1)
test2<-tidy.data[,c(test,test1)]
head(test2)
col.mean<-grep("mean",names(tidy.data),ignore.case=TRUE)
col.std<-grep("std",names(tidy.data),ignore.case=TRUE)
tidy.data<-tidy.data[,c(col.mean,col.std)]
setwd("C:/Users/Tuomas/Documents/Olga/Git/GettingAndCleaningData_Project")
#Get data and load into R
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile = "./data/activityGalaxy.zip")
dateDownloaded<-date()
library(utils)
unzip("./data/activityGalaxy.zip",exdir="./data")
list.files ()
# 1.Merge the training and the test sets to create one data set.
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var$V2)
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
#clean memory
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var,act.lbl)
# 2.Extract only the measurements on the mean and standard deviation for each
#   measurement.
col.mean<-grep("mean",names(tidy.data),ignore.case=TRUE)
col.std<-grep("std",names(tidy.data),ignore.case=TRUE)
tidy.data<-tidy.data[,c(col.mean,col.std)]
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
var[,2]
col.dbl<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl
tidy.data[,col.dbl]
names(tidy.data[,col.dbl])
tidy.data[,c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")]
tidy.data[,c("fBodyBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")]
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var$V2)
#clean memory
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var)
# 2.Extract only the measurements on the mean and standard deviation for each
#   measurement.
col.mean<-grep("mean",names(tidy.data),ignore.case=TRUE)
col.std<-grep("std",names(tidy.data),ignore.case=TRUE)
tidy.data<-tidy.data[,c(1,2,col.mean,col.std)]
# 3.Use descriptive activity names to name the activities in the data set.
#(aka replace numerical values in the Activity column with labels)
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
rm(act.lbl)
# 4.Appropriately label the data set with descriptive activity names.
#(aka make col names more human readable)
col.dbl<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
#list variables with duplicates
names(tidy.data[,col.dbl])
#check if column names without duplicates already exist
tidy.data[,c("Subject","Activity")]
tidy.data[,c("fBodyBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")]
tidy.data[,c("fBodyBodyAccJerkMag-mean()")]
match(c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()"),names(tidy.data))
names(tidy.data[,col.dbl])<-c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")
col.dbl<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var$V2)
#clean memory
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var)
# 2.Extract only the measurements on the mean and standard deviation for each
#   measurement.
col.mean<-grep("mean",names(tidy.data),ignore.case=TRUE)
col.std<-grep("std",names(tidy.data),ignore.case=TRUE)
tidy.data<-tidy.data[,c(1,2,col.mean,col.std)]
# 3.Use descriptive activity names to name the activities in the data set.
#(aka replace numerical values in the Activity column with labels)
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
rm(act.lbl)
# 4.Appropriately label the data set with descriptive activity names.
#(aka make col names more human readable)
col.dbl<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl
#list variables with duplicates
names(tidy.data[,col.dbl])
#check if column names without duplicates already exist
match(c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()"),names(tidy.data))
#change column names
names(tidy.data[,col.dbl])<-c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")
col.dbl1<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl1
col.dbl
names(tidy.data[,col.dbl])
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var$V2)
#clean memory
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var)
# 2.Extract only the measurements on the mean and standard deviation for each
#   measurement.
col.mean<-grep("mean",names(tidy.data),ignore.case=TRUE)
col.std<-grep("std",names(tidy.data),ignore.case=TRUE)
tidy.data<-tidy.data[,c(1,2,col.mean,col.std)]
# 3.Use descriptive activity names to name the activities in the data set.
#(aka replace numerical values in the Activity column with labels)
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
rm(act.lbl)
# 4.Appropriately label the data set with descriptive activity names.
#(aka make col names more human readable)
col.dbl<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl
#list variables with duplicates
names(tidy.data[,col.dbl])
#check if column names without duplicates already exist
match(c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()"),names(tidy.data))
#change column names
colnames(tidy.data)[col.dbl])<-c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")
col.dbl1<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl1
var<-read.table("./data/UCI HAR Dataset/features.txt",stringsAsFactors = FALSE)
act.lbl<-read.table("./data/UCI HAR Dataset/activity_labels.txt")
test.msmt<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.lbl<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.sub<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
test<-cbind(test.sub,test.lbl,test.msmt)
train.msmt<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.lbl<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.sub<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
train<-cbind(train.sub,train.lbl,train.msmt)
tidy.data<-rbind(test,train)
names(tidy.data)<-c("Subject","Activity",var$V2)
#clean memory
rm(test.msmt,test.lbl,test.sub,test,train.msmt,train.lbl,train.sub,train,var)
# 2.Extract only the measurements on the mean and standard deviation for each
#   measurement.
col.mean<-grep("mean",names(tidy.data),ignore.case=TRUE)
col.std<-grep("std",names(tidy.data),ignore.case=TRUE)
tidy.data<-tidy.data[,c(1,2,col.mean,col.std)]
# 3.Use descriptive activity names to name the activities in the data set.
#(aka replace numerical values in the Activity column with labels)
tidy.data$Activity<-act.lbl[tidy.data$Activity,"V2"]
rm(act.lbl)
# 4.Appropriately label the data set with descriptive activity names.
#(aka make col names more human readable)
col.dbl<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl
#list variables with duplicates
names(tidy.data[,col.dbl])
#check if column names without duplicates already exist
match(c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()"),names(tidy.data))
#change column names
colnames(tidy.data)[col.dbl]<-c("fBodyAccJerkMag-mean()","fBodyAccJerkMag-meanFreq()",
"fBodyGyroMag-mean()", "fBodyGyroMag-meanFreq()","fBodyGyroJerkMag-mean()",
"fBodyGyroJerkMag-meanFreq()","fBodyAccJerkMag-std()","fBodyGyroMag-std()",
"fBodyGyroJerkMag-std()")
col.dbl1<-grep("BodyBody",names(tidy.data),ignore.case=TRUE)
col.dbl1
